AdaBoostClassifier: ['algorithm', 'learning_rate', 'n_estimators']
AdaBoostRegressor: ['learning_rate', 'loss', 'n_estimators']
BaggingClassifier: ['bootstrap', 'bootstrap_features', 'max_features', 'max_samples', 'n_estimators', 'oob_score', 'warm_start']
ColumnTransformer: ['remainder', 'sparse_threshold']
DecisionTreeClassifier: ['criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'splitter']
DecisionTreeRegressor: ['criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'splitter']
ExtraTreesClassifier: ['bootstrap', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'oob_score', 'warm_start']
ExtraTreesRegressor: ['bootstrap', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'oob_score', 'warm_start']
FeatureAgglomeration: ['affinity', 'compute_full_tree', 'linkage', 'n_clusters']
FunctionTransformer: ['accept_sparse', 'check_inverse', 'pass_y', 'validate']
GaussianNB: ['var_smoothing']
GradientBoostingClassifier: ['criterion', 'learning_rate', 'loss', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'n_iter_no_change', 'subsample', 'tol', 'validation_fraction', 'warm_start']
GradientBoostingRegressor: ['alpha', 'criterion', 'learning_rate', 'loss', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'n_iter_no_change', 'subsample', 'tol', 'validation_fraction', 'warm_start']
KNeighborsClassifier: ['algorithm', 'leaf_size', 'metric', 'n_neighbors', 'p']
KNeighborsRegressor: ['algorithm', 'leaf_size', 'metric', 'n_neighbors', 'p']
LinearRegression: ['copy_X', 'fit_intercept', 'normalize']
LinearSVC: ['C', 'dual', 'fit_intercept', 'intercept_scaling', 'loss', 'max_iter', 'multi_class', 'penalty', 'tol']
LogisticRegression: ['C', 'dual', 'fit_intercept', 'intercept_scaling', 'max_iter', 'multi_class', 'penalty', 'solver', 'tol', 'warm_start', 'l1_ratio']
MLPClassifier: ['activation', 'alpha', 'batch_size', 'beta_1', 'beta_2', 'early_stopping', 'epsilon', 'hidden_layer_sizes', 'learning_rate', 'learning_rate_init', 'max_iter', 'momentum', 'n_iter_no_change', 'nesterovs_momentum', 'power_t', 'shuffle', 'solver', 'tol', 'validation_fraction', 'warm_start']
MinMaxScaler: ['copy', 'feature_range']
MissingIndicator: ['error_on_new', 'features', 'sparse']
MultinomialNB: ['alpha', 'fit_prior']
NMF: ['alpha', 'beta_loss', 'l1_ratio', 'max_iter', 'n_components', 'shuffle', 'solver', 'tol']
Normalizer: ['copy', 'norm']
Nystroem: ['coef0', 'degree', 'gamma', 'kernel', 'n_components']
OneHotEncoder: ['handle_unknown', 'sparse']
OrdinalEncoder: ['handle_unknown']
PCA: ['copy', 'iterated_power', 'n_components', 'svd_solver', 'tol', 'whiten']
PassiveAggressiveClassifier: ['C', 'average', 'early_stopping', 'fit_intercept', 'loss', 'max_iter', 'n_iter', 'n_iter_no_change', 'shuffle', 'tol', 'validation_fraction', 'warm_start']
Pipeline: []
PolynomialFeatures: ['degree', 'include_bias', 'interaction_only']
QuadraticDiscriminantAnalysis: ['reg_param', 'store_covariance', 'tol']
QuantileTransformer: ['copy', 'ignore_implicit_zeros', 'n_quantiles', 'output_distribution', 'subsample']
RFE: ['n_features_to_select', 'step']
RandomForestClassifier: ['bootstrap', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'oob_score', 'warm_start']
RandomForestRegressor: ['bootstrap', 'criterion', 'max_depth', 'max_features', 'max_leaf_nodes', 'min_impurity_decrease', 'min_samples_leaf', 'min_samples_split', 'min_weight_fraction_leaf', 'n_estimators', 'oob_score', 'warm_start']
Ridge: ['alpha', 'copy_X', 'fit_intercept', 'max_iter', 'normalize', 'solver', 'tol']
RidgeClassifier: ['alpha', 'copy_X', 'fit_intercept', 'max_iter', 'normalize', 'solver', 'tol']
RobustScaler: ['copy', 'quantile_range', 'with_centering', 'with_scaling']
SGDClassifier: ['alpha', 'average', 'early_stopping', 'epsilon', 'eta0', 'fit_intercept', 'l1_ratio', 'learning_rate', 'loss', 'max_iter', 'n_iter_no_change', 'penalty', 'power_t', 'shuffle', 'tol', 'validation_fraction', 'warm_start']
SGDRegressor: ['alpha', 'average', 'early_stopping', 'epsilon', 'eta0', 'fit_intercept', 'l1_ratio', 'learning_rate', 'loss', 'max_iter', 'n_iter_no_change', 'penalty', 'power_t', 'shuffle', 'tol', 'validation_fraction', 'warm_start']
SVC: ['C', 'cache_size', 'coef0', 'decision_function_shape', 'degree', 'gamma', 'kernel', 'max_iter', 'probability', 'shrinking', 'tol']
SVR: ['C', 'cache_size', 'coef0', 'degree', 'epsilon', 'gamma', 'kernel', 'max_iter', 'shrinking', 'tol']
SelectKBest: ['k']
SimpleImputer: ['copy', 'strategy']
StandardScaler: ['copy', 'with_mean', 'with_std']
TfidfVectorizer: ['analyzer', 'binary', 'decode_error', 'input', 'lowercase', 'max_df', 'max_features', 'min_df', 'ngram_range', 'norm', 'preprocessor', 'smooth_idf', 'strip_accents', 'sublinear_tf', 'tokenizer', 'use_idf']
VotingClassifier: ['flatten_transform', 'voting']